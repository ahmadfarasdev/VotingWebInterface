
# When running in a container we don't want the initial process to exit
daemon off;

# With Docker, only one process per container makes sense, because if more
# throughput is needed more containers should be run behind a load balancer
worker_processes 1;


# Allow a large number of open file handles
worker_rlimit_nofile 16384;

# Use the just-in-time compiler to improve regex peformance
pcre_jit on;


# Contains settings for processing connections
events {

  # Maximum number of simultaneous connections per worker
  worker_connections 2048;

  # Accept as many connections as possible after a new connection
  multi_accept on;

}


# Contains core http processing features
http {

  # Optimize the TCP stack for minimal latency
  tcp_nopush on;
  tcp_nodelay on;

  # Timeouts for keepalive connections and client communication
  keepalive_timeout 60;
  keepalive_requests 1024;
  client_header_timeout 30;
  client_body_timeout 30;
  send_timeout 30;

  # Buffer configuration
  client_body_buffer_size 128k;
  client_max_body_size 10m;
  client_header_buffer_size 1k;
  large_client_header_buffers 4 4k;
  output_buffers 1 32k;
  postpone_output 1460;

  # Copy data directly between disk and socket
  sendfile on;
  sendfile_max_chunk 256k;

  # Close connections on non-responding clients
  reset_timedout_connection on;

  # Maximum size of the types hash tables
  types_hash_max_size 2048;

  # Perform some basic caching on file descriptors
  open_file_cache max=65000 inactive=60s;
  open_file_cache_min_uses 2;
  open_file_cache_valid 30s;
  open_file_cache_errors on;

  # Disable transmission of server information in headers and error messages
  server_tokens off;
  server_name_in_redirect off;

  # Perform automatic MIME type detection, with a sensible default
  include mime.types;
  default_type application/octet-stream;

  # Log to standard ouput and error which are both captured by Docker
  log_format default '$time_iso8601 - $remote_addr "$request" $status $body_bytes_sent $http_x_request_id "$http_user_agent"';
  access_log /dev/stdout default;
  error_log /dev/stderr warn;

  # Map all invalid requests to forbidden so file layout doesn't leak
  error_page 404 =403 @404;

  # Main server configuration
  server {

    # Only listen on plain HTTP
    listen 80;
    listen [::]:80;

    # Map all requests to the Angular 2.0 ouptut folder, and cache all resources for
    # the maximum amount of time since their filenames will change with each redeploy
    location / {
      root html;
      index index.html;
      expires max;
    }

    # Need a different caching strategy for index.hmtl since its
    # resource name never changes
    location /index.html {
      expires 1m;
    }

    # Named location for invalid requests
    location @404 {
      return 403 "forbidden";
    }

  }

}
